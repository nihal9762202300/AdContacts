
how to add this contacts to https://AdContacts.blogspot.com

Sure! Below is a complete implementation of your Contacts Progressive Web Application (PWA) using MongoDB as the database. This includes:

    Backend (Node.js + Express + MongoDB)

    Frontend (HTML + CSS + JavaScript)

    Service Worker for PWA functionality

    MongoDB Integration for permanent data storage

Step 1: Set Up MongoDB

    Install MongoDB:

        Download and install MongoDB from https://www.mongodb.com/try/download/community.

        Start the MongoDB server:
        bash
        Copy

        mongod

    Create a Database:

        Open the MongoDB shell:
        bash
        Copy

        mongo

        Create a database named contacts:
        javascript
        Copy

        use contacts

Step 2: Project Structure
Copy

contacts-pwa/
â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ index.html
â”‚   â”œâ”€â”€ styles.css
â”‚   â”œâ”€â”€ app.js
â”‚   â”œâ”€â”€ manifest.json
â”‚   â””â”€â”€ sw.js
â”œâ”€â”€ server.js
â”œâ”€â”€ package.json
â””â”€â”€ .gitignore

Step 3: Install Dependencies

Run the following command in your project directory:
bash
Copy

npm install express mongoose body-parser

Step 4: Backend (server.js)
javascript
Copy

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/contacts', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Define Contact Schema
const contactSchema = new mongoose.Schema({
    category: String,
    name: String,
    mobile: String,
    email: String,
    address: String,
    qualification: String,
    favourites: String,
    note: String,
});

const Contact = mongoose.model('Contact', contactSchema);

// API Routes

// Add a new contact
app.post('/api/contacts', async (req, res) => {
    try {
        const contact = new Contact(req.body);
        await contact.save();
        res.status(201).send(contact);
    } catch (error) {
        res.status(400).send(error);
    }
});

// Get all contacts
app.get('/api/contacts', async (req, res) => {
    try {
        const contacts = await Contact.find();
        res.send(contacts);
    } catch (error) {
        res.status(500).send(error);
    }
});

// Serve the frontend
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

Step 5: Frontend (public/index.html)
html
Copy

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contacts</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="manifest" href="manifest.json">
</head>
<body>
    <h1>Contacts</h1>
    <form id="contactForm">
        <label for="category">Category:</label>
        <input type="text" id="category" name="category" required>

        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>

        <label for="mobile">Mobile:</label>
        <input type="text" id="mobile" name="mobile" required>

        <label for="email">E-Mail:</label>
        <input type="email" id="email" name="email" required>

        <label for="address">Address:</label>
        <input type="text" id="address" name="address" required>

        <label for="qualification">Qualification:</label>
        <input type="text" id="qualification" name="qualification" required>

        <label for="favourites">Favourites:</label>
        <input type="text" id="favourites" name="favourites" required>

        <label for="note">Note:</label>
        <textarea id="note" name="note" required></textarea>

        <button type="submit">Add Contact</button>
    </form>

    <ul id="contactList"></ul>

    <script src="app.js"></script>
</body>
</html>

Run HTML
Step 6: Frontend Logic (public/app.js)
javascript
Copy

// Fetch and display contacts
async function loadContacts() {
    try {
        const response = await fetch('/api/contacts');
        const contacts = await response.json();
        contacts.forEach(addContactToList);
    } catch (error) {
        console.error('Error loading contacts:', error);
    }
}

// Add a new contact
async function saveContact(contact) {
    try {
        const response = await fetch('/api/contacts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(contact),
        });
        const newContact = await response.json();
        addContactToList(newContact);
    } catch (error) {
        console.error('Error saving contact:', error);
    }
}

// Add contact to the list
function addContactToList(contact) {
    const li = document.createElement('li');
    li.innerHTML = `
        <strong>${contact.name}</strong><br>
        Category: ${contact.category}<br>
        Mobile: ${contact.mobile}<br>
        E-Mail: ${contact.email}<br>
        Address: ${contact.address}<br>
        Qualification: ${contact.qualification}<br>
        Favourites: ${contact.favourites}<br>
        Note: ${contact.note}
    `;
    document.getElementById('contactList').appendChild(li);
}

// Form submission
document.getElementById('contactForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const contact = {
        category: document.getElementById('category').value,
        name: document.getElementById('name').value,
        mobile: document.getElementById('mobile').value,
        email: document.getElementById('email').value,
        address: document.getElementById('address').value,
        qualification: document.getElementById('qualification').value,
        favourites: document.getElementById('favourites').value,
        note: document.getElementById('note').value,
    };

    await saveContact(contact);
    document.getElementById('contactForm').reset();
});

// Load contacts on page load
window.onload = loadContacts;

Step 7: Service Worker (public/sw.js)
javascript
Copy

const CACHE_NAME = 'contacts-pwa-v1';
const ASSETS = [
    '/',
    '/index.html',
    '/styles.css',
    '/app.js',
    '/manifest.json'
];

// Install Event
self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => cache.addAll(ASSETS))
    );
});

// Fetch Event
self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request)
            .then((response) => response || fetch(event.request))
    );
});

Step 8: Web App Manifest (public/manifest.json)
json
Copy

{
    "name": "Contacts",
    "short_name": "Contacts",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#ffffff",
    "description": "A simple contact list PWA.",
    "icons": [
        {
            "src": "icon-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icon-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ]
}

Step 9: Run the Application

    Start the server:
    bash
    Copy

    node server.js

    Open your browser and navigate to http://localhost:3000.

    Add contacts, and they will be stored permanently in MongoDB.

This is a complete implementation of your Contacts PWA with MongoDB. Let me know if you need further assistance! ðŸ˜Š
